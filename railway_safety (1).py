# -*- coding: utf-8 -*-
"""Railway Safety.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gygIPKMsEKPktskhvqRpctmAu0cDXSj5
"""

#connecting colab file and google drive
from google.colab import drive
drive.mount('/content/gdrive')
root_path = 'gdrive/My Drive/'

#importing the libraries
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator

# Model Definition
classifier = Sequential()
classifier.add(Conv2D(16, (3, 3), input_shape=(64, 64, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Conv2D(16, (3, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Flatten())
classifier.add(Dense(units=128, activation='relu'))  # Adjust the units to match the Flatten output
classifier.add(Dense(units=9, activation='softmax'))

classifier.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Data Augmentation
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

# Loading Data
training_set = train_datagen.flow_from_directory('gdrive/My Drive/Data mining project/Training_set_cnn',
                                                 target_size=(64, 64),
                                                 batch_size=32,
                                                 class_mode='categorical')

test_set = test_datagen.flow_from_directory('gdrive/My Drive/Data mining project/Test_set_cnn',
                                            target_size=(64, 64),
                                            batch_size=32,
                                            class_mode='categorical')

# Model Training
model = classifier.fit(training_set,
               steps_per_epoch=len(training_set),
               epochs=50,
               validation_data=test_set,
               validation_steps=len(test_set))

test_loss, test_accuracy = classifier.evaluate(test_set)
print("Test Accuracy: ", test_accuracy*100)

import plotly.express as px
import pandas as pd

# Extracting data from the model history
history = model.history

# Creating a DataFrame
epochs = range(1, len(history['accuracy']) + 1)
data = {
    'Epoch': epochs,
    'Accuracy': history['accuracy'],
    'Val_Accuracy': history['val_accuracy'],
    'Loss': history['loss'],
    'Val_Loss': history['val_loss']
}
df = pd.DataFrame(data)

# Plotting accuracy and validation accuracy across epochs
fig_acc = px.line(df, x='Epoch', y=['Accuracy', 'Val_Accuracy'],
                  labels={'value': 'Accuracy', 'Epoch': 'Epoch'},
                  title='Training Accuracy vs Validation Accuracy')
fig_acc.show()

# Plotting loss and validation loss across epochs
fig_loss = px.line(df, x='Epoch', y=['Loss', 'Val_Loss'],
                   labels={'value': 'Loss', 'Epoch': 'Epoch'},
                   title='Training Loss vs Validation Loss')
fig_loss.show()